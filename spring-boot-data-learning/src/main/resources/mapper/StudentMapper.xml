<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.kjwang.mapper.StudentMapper">
    <!--声明关联查询的结果集-->
    <resultMap id="studentMap" type="Student">
        <id column="student_id" property="studentId"/>
        <result column="clazz_id" property="clazzId"/>
        <result column="student_name" property="studentName"/>
        <result column="hometown" property="hometown"/>
        <result column="birthday" property="birthday"/>
        <association property="clazz" javaType="Clazz">
            <id column="clazz_id" property="clazzId"/>
            <result column="clazz_name" property="clazzName"/>
        </association>
    </resultMap>

    <!--    关联查询-->
    <select id="getStudent" resultMap="studentMap" parameterType="int">
        SELECT s.student_id,
               s.clazz_id,
               s.student_name,
               s.hometown,
               s.birthday,
               c.clazz_id,
               c.clazz_name
        FROM t_student s
                 LEFT JOIN t_clazz c
                           ON s.clazz_id = c.clazz_id
        WHERE s.student_id = #{studentId}
    </select>

    <select id="selectManyToOne" resultMap="studentMap">
        SELECT s.student_id, s.student_name, s.hometown, s.birthday, c.clazz_id, c.clazz_name
        FROM t_student s,
             t_clazz c
        WHERE s.student_id = #{studentId}
          AND s.clazz_id = c.clazz_id
    </select>

<!--批量新增-->
    <insert id="batchInsert" parameterType="Student">
        INSERT INTO t_student
        VALUES
        <foreach collection="students" item="student" index="index" separator=",">
            (#{student.studentId},#{student.clazzId},#{student.studentName},
             #{student.hometown},#{student.birthday})
        </foreach>
    </insert>


    <!--批量修改-->
    <update id="batchUpdate" parameterType="java.util.List">
        <foreach collection="students" item="student" index="index" open="" close="" separator=";">
            UPDATE t_student t
            <set>
                <if test="student.clazzId != null">
                    `clazz_id` = #{student.clazzId},
                </if>
                <if test="student.studentName != null">
                    `student_name` = #{student.studentName},
                </if>
                <if test="student.hometown != null">
                    `hometown` = #{student.hometown},
                </if>
                <if test="student.birthday != null">
                    `birthday` = #{student.birthday},
                </if>
            </set>
            WHERE t.student_id = #{student.studentId}
        </foreach>
    </update>

<!--  批量删除  -->
    <delete id="batchDelete" parameterType="int">
        DELETE FROM t_student
        WHERE student_id in
        <foreach collection="idList" item="id" index="index" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>


<!--动态查询-->
    <select id="dynamicSelect" parameterType="Student" resultType="Student">
        SELECT *
        FROM t_student
        WHERE 1 = 1
        <choose>
            <when test="clazzId != null">
                AND clazz_id = #{clazzId}
            </when>
            <when test="studentName != null">
                AND student_name = #{studentName}
            </when>
            <when test="hometown != null">
                AND hometown LIKE "%"#{hometown}"%"
            </when>
        </choose>
    </select>
<!--    将容器中的元素一个一个拼接到 xml 的方法中，就要使用这个 forEach 标签-->
    <select id="queryByIds" resultType="Student">
        SELECT * FROM t_student
        WHERE student_id in
        <foreach collection="studentIds" item="studentId" index="index" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </select>

<!--    当我们想要进行条件查询，但是几个条件不是每次都要使用,那么我们就可以通过判断，来觉得是否拼接到SQL 中。-->
    <select id="queryLike" resultType="Student">
        SELECT * FROM t_student
<where>
    <if test="studentName != null">
        student_name LIKE concat('%',concat(#{studentName},'%'))
    </if>
</where>
    </select>


    <!--  choose(判断参数) 按顺序将实体类 Student 第一个不为空的属性作为 where 条件 -->
    <select id="getStudentListChoose" resultType="Student" parameterType="Student">
        SELECT *
        FROM t_student s
        <where>
            <choose>
                <when test="clazzId !=null ">
                    s.clazz_id = #{clazzId,jdbcType=INTEGER}
                </when>
                <when test="studentName !=null and studentName != '' ">
                    AND s.student_name LIKE CONCAT(CONCAT('%', #{studentName, jdbcType=VARCHAR}),'%')
                </when>
                <when test="hometown != null and hometown != '' ">
                    AND s.hometown LIKE CONCAT(CONCAT('%', #{hometown, jdbcType=VARCHAR}),'%')
                </when>
                <when test="birthday != null ">
                    AND s.birthday = #{birthday, jdbcType=DATE}
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </where>
    </select>

    <!--新增学生，返回自增主键-->
    <insert id="createStudentAutoKey" parameterType="Student" useGeneratedKeys="true" keyProperty="studentId">
        INSERT INTO t_student (clazz_id,student_name, hometown,birthday)
        VALUES (#{clazzId},#{studentName},#{hometown}, #{birthday})
    </insert>

    <!-- 查询学生list，like姓名 -->
    <select id="getStudentListLikeName" parameterType="Student" resultType="Student">
        SELECT *
        FROM t_student s
        WHERE s.student_name LIKE CONCAT(CONCAT('%', #{studentName}), '%')
    </select>

    <!-- 2 if(判断参数) - 将实体类不为空的属性作为where条件 -->
    <select id="getStudentListIf" resultType="Student" parameterType="Student">
        SELECT *
        FROM t_student s
        WHERE
        <if test="clazzId != null ">
            s.clazz_id = #{clazzId, jdbcType=INTEGER}
        </if>
        <if test="studentName !=null ">
            AND s.student_name LIKE CONCAT(CONCAT('%', #{studentName, jdbcType=VARCHAR}),'%')
        </if>
        <if test="hometown != null">
            AND s.hometown = #{hometown, jdbcType=VARCHAR}
        </if>
        <if test="birthday!= null ">
            AND s.birthday = #{birthday, jdbcType=DATE}
        </if>
    </select>

    <!-- 4 if/set(判断参数) - 将实体类不为空的属性更新 -->
    <update id="updateStudentIfSet" parameterType="Student">
        UPDATE t_student s
        <set>
            <if test="studentName != null and studentName != '' ">
                s.student_name = #{studentName},
            </if>
            <if test="clazzId != null ">
                s.clazz_id = #{clazzId},
            </if>
            <if test="hometown != null and hometown != '' ">
                s.hometown = #{hometown},
            </if>
            <if test="birthday != null ">
                s.birthday = #{birthday},
            </if>
        </set>
        WHERE s.student_id = #{studentId};
    </update>

</mapper>